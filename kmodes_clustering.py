# -*- coding: utf-8 -*-
"""KModes_clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18ITNLkF3hUaCa5_OfQQxG60rQJ1JKNv1
"""

import warnings
warnings.simplefilter('ignore')

from google.colab import drive
drive.mount('/content/drive')

"""# 0.Setting

## 0.1.Import libraries
"""

!pip install kmodes
!pip install --upgrade kmodes

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn import preprocessing
from kmodes.kmodes import KModes

# Commented out IPython magic to ensure Python compatibility.
# %cd '/content/drive/Shared drives/SI650/dataset/'

"""# 1.Clustering - KMode

## 1.1.Data preprocess
"""

data_KMode = pd.read_csv("sephora_review_skincare_db_id.csv")

num_userid = data_KMode.user_id.value_counts()
num_userid.describe()

main_users = []
for i in range(len(num_userid)):
    if num_userid.iloc[i] >= 5:
        main_users.append(num_userid.index[i])

df_sample = data_KMode[data_KMode.user_id.isin(main_users)]

df_user = df_sample[['user_id', 'product_id', 'rating', 
                     'skin_type', 'skin_tone', 'skin_concerns']].reset_index(drop=True)
df_user.skin_type.fillna('no answer', inplace = True)
df_user.skin_tone.fillna('no answer', inplace = True)
df_user.skin_concerns.fillna('no answer', inplace = True)

df_user.head()

df_user.info()

df_item = df_sample[['product_id', 'brand_id', 
                     'description', 'price']].reset_index(drop=True)

def pick_lowprice(price):
    idx = price.find('-')
    if idx == -1:
        return float(price[1:])
    else:
        return float(price[1:idx - 1])

def pick_highprice(price):
    idx = price.find('-')
    if idx == -1:
        return float(price[1:])
    else:
        return float(price[idx + 3:])

df_item['low_price'] = df_item.price.map(pick_lowprice)
df_item['high_price'] = df_item.price.map(pick_highprice)
df_item['rprice'] = 0.5 * (df_item.high_price + df_item.low_price)
df_item.drop(['price', 'low_price', 'high_price'], axis=1, inplace=True)

df_item['len_des'] = df_item.description.map(len)
df_item.drop_duplicates(['product_id','rprice'], inplace=True)
df_item.reset_index(drop=True, inplace=True)
df_item.drop(['len_des', 'description'], axis=1, inplace=True)

def map_price(price):
    if price <= 26.00:
        return 0
    elif price > 26.00 and price <= 40.00:
        return 1
    elif price >40.00 and price <= 60.875:
        return 2
    else:
        return 3

df_item['price_band'] = df_item.rprice.map(map_price)
df_item.drop('rprice', axis=1, inplace=True)
df_item.head()

df_user_item = df_user.merge(df_item, how='left', left_on='product_id', right_on='product_id')
df_user_item.head()

select_col = ['user_id', 'skin_type', 'skin_tone', 
              'skin_concerns', 'price_band', 'rating']

df_user_k = df_user_item.copy()
df_user_k = df_user_k[select_col]

df_user_ori = df_user_item.copy()
df_user_ori = df_user_ori[select_col]

convert = ['user_id', 'price_band', 'rating']
df_user_k[convert] = df_user_k[convert].astype('category')
df_user_ori[convert] = df_user_ori[convert].astype('category')

df_user_k.info()

le = preprocessing.LabelEncoder()
df_user_k = df_user_k.apply(le.fit_transform)
df_user_k.head()

"""#2.Run KModes

## 2.1.Initial Huang
"""

# Choosing K by comparing Cost against each K
# https://www.kaggle.com/ashydv/bank-customer-clustering-k-modes-clustering
cost = []
for num_clusters in list(range(1,10)):
    kmode = KModes(n_clusters=num_clusters, init = "Huang", n_init = 1, verbose=1)
    kmode.fit_predict(df_user_k)
    cost.append(kmode.cost_)

"""## 2.2.Initial Cao"""

# Choosing K by comparing Cost against each K
# https://www.kaggle.com/ashydv/bank-customer-clustering-k-modes-clustering
# https://www.kaggle.com/teejmahal20/clustering-categorical-data-k-modes-cat-ii
cost2 = []
for num_clusters in list(range(1,10)):
    kmode = KModes(n_clusters=num_clusters, init = "Cao", n_init = 1, verbose=1)
    kmode.fit_predict(df_user_k)
    cost2.append(kmode.cost_)

y = np.array([i for i in range(1,10,1)])
plt.plot(y,cost)
plt.grid(True)
plt.xlabel('K', size=12)
plt.ylabel('cost', size=12)

y = np.array([i for i in range(1,10,1)])
plt.plot(y,cost2)
plt.grid(True)
plt.xlabel('K', size=12)
plt.ylabel('cost', size=12)

"""## 2.3.Final model"""

# refit the model with selected K = 3
km_huang = KModes(n_clusters=3, init = "Huang", n_init = 1, verbose=1)
fitClusters_huang = km_huang.fit_predict(df_user_k)

# combine the cluster results back to the original dataframe
df_user_k2 = df_user_ori.reset_index()

clustersDf = pd.DataFrame(fitClusters_huang)
clustersDf.columns = ['cluster_predicted']
combinedDf = pd.concat([df_user_k2, clustersDf], axis = 1).reset_index()
combinedDf = combinedDf.drop(['index', 'level_0'], axis = 1)
combinedDf.head()

combinedDf.cluster_predicted.value_counts()

# display some features
cluster_0 = combinedDf[combinedDf['cluster_predicted'] == 0]
cluster_1 = combinedDf[combinedDf['cluster_predicted'] == 1]
cluster_2 = combinedDf[combinedDf['cluster_predicted'] == 2]

# rating
plt.subplots(figsize = (7,5))
sns.countplot(x=combinedDf['rating'], order=combinedDf['rating'].value_counts().index,
              hue=combinedDf['cluster_predicted'])
# plt.savefig('/content/drive/Shareddrives/SI650/Pictures/Cluster_rating3.png')
plt.show()

# skin types
plt.subplots(figsize = (7,5))
sns.countplot(x=combinedDf['skin_type'],order=combinedDf['skin_type'].value_counts().index,hue=combinedDf['cluster_predicted'])
plt.savefig('/content/drive/Shareddrives/SI650/Pictures/Cluster_Skin_type3.png')
plt.show()

# skin tones
plt.subplots(figsize = (10,5))
sns.countplot(x=combinedDf['skin_tone'],order=combinedDf['skin_tone'].value_counts().index,hue=combinedDf['cluster_predicted'])
plt.savefig('/content/drive/Shareddrives/SI650/Pictures/Cluster_Skin_tone3.png')
plt.show()

# skin concerns
plt.subplots(figsize = (15,5))
sns.countplot(x=combinedDf['skin_concerns'],order=combinedDf['skin_concerns'].value_counts().index, 
              hue=combinedDf['cluster_predicted'])
plt.savefig('/content/drive/Shareddrives/SI650/Pictures/Cluster_skin_concerns3.png')
plt.show()

# price bands
plt.subplots(figsize = (7,5))
sns.countplot(x=combinedDf['price_band'],order=combinedDf['price_band'].value_counts().index,hue=combinedDf['cluster_predicted'])
plt.savefig('/content/drive/Shareddrives/SI650/Pictures/Cluster_Price_band3.png')
plt.show()

# skin types and skin tones
f, axs = plt.subplots(1,2,figsize = (15,5))
sns.countplot(x=combinedDf['skin_type'],order=combinedDf['skin_type'].value_counts().index,
              hue=combinedDf['cluster_predicted'],ax=axs[0])
sns.countplot(x=combinedDf['skin_tone'],order=combinedDf['skin_tone'].value_counts().index,
              hue=combinedDf['cluster_predicted'],ax=axs[1])

plt.tight_layout()
plt.show()

f.savefig('/content/drive/Shareddrives/SI650/Pictures/Cluster_skin_TypesAndTones3.png')

# skin concerns and price bands
f, axs = plt.subplots(1,2, figsize = (15,5))
sns.countplot(x=combinedDf['skin_concerns'], order=combinedDf['skin_concerns'].value_counts().index,
              hue=combinedDf['cluster_predicted'],ax=axs[0])
sns.countplot(x=combinedDf['price_band'], order=combinedDf['price_band'].value_counts().index,
              hue=combinedDf['cluster_predicted'],ax=axs[1])

plt.tight_layout()
plt.show()

plt.subplots(figsize = (15,5))
sns.countplot(x=combinedDf['user_id'],order=combinedDf['user_id'].value_counts().index,hue=combinedDf['cluster_predicted'])
plt.show()

# An example of new user's information to find similar existing users
result = combinedDf[combinedDf.skin_type == 'combination']
result = result[result.skin_tone == 'medium']
result = result[result.skin_concerns == 'acne']
result = result[result.price_band == 3]
result = result[result.rating == 4]
result.cluster_predicted.value_counts()